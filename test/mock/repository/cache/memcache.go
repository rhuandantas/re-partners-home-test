// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/cache/memcache.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/cache/memcache.go -package=mock_cache -destination=test/mock/repository/cache/memcache.go
//

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMemcacheClient is a mock of MemcacheClient interface.
type MockMemcacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemcacheClientMockRecorder
	isgomock struct{}
}

// MockMemcacheClientMockRecorder is the mock recorder for MockMemcacheClient.
type MockMemcacheClientMockRecorder struct {
	mock *MockMemcacheClient
}

// NewMockMemcacheClient creates a new mock instance.
func NewMockMemcacheClient(ctrl *gomock.Controller) *MockMemcacheClient {
	mock := &MockMemcacheClient{ctrl: ctrl}
	mock.recorder = &MockMemcacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemcacheClient) EXPECT() *MockMemcacheClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemcacheClient) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemcacheClientMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemcacheClient)(nil).Get), key)
}

// Set mocks base method.
func (m *MockMemcacheClient) Set(key string, value []byte, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMemcacheClientMockRecorder) Set(key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemcacheClient)(nil).Set), key, value, expiration)
}
